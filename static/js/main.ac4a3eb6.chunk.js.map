{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","newItem","list","this","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","key","localStorage","hasOwnProperty","value","getItem","JSON","parse","setState","e","setItem","stringify","id","Math","random","slice","push","updatedList","filter","item","className","type","placeholder","onChange","updateInput","target","onClick","addItem","disabled","length","class","map","deleteItem","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAiJeA,E,kDA7Ib,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,KAAM,IAJS,E,qDASnB,WACEC,KAAKC,+BAILC,OAAOC,iBACL,eACAH,KAAKI,wBAAwBC,KAAKL,S,kCAItC,WACEE,OAAOI,oBACL,eACAN,KAAKI,wBAAwBC,KAAKL,OAIpCA,KAAKI,4B,0CAGP,WAEE,IAAK,IAAIG,KAAOP,KAAKH,MAEnB,GAAIW,aAAaC,eAAeF,GAAM,CAEpC,IAAIG,EAAQF,aAAaG,QAAQJ,GAGjC,IACEG,EAAQE,KAAKC,MAAMH,GACnBV,KAAKc,SAAL,eAAiBP,EAAMG,IACvB,MAAOK,GAEPf,KAAKc,SAAL,eAAiBP,EAAMG,Q,qCAM/B,WAEE,IAAK,IAAIH,KAAOP,KAAKH,MAEnBW,aAAaQ,QAAQT,EAAKK,KAAKK,UAAUjB,KAAKH,MAAMU,O,yBAIxD,SAAYA,EAAKG,GAEfV,KAAKc,SAAL,eAAiBP,EAAMG,M,qBAGzB,WAEE,IAAMZ,EAAU,CACdoB,GAAI,EAAIC,KAAKC,SACbV,MAAOV,KAAKH,MAAMC,QAAQuB,SAKtBtB,EAAI,YAAOC,KAAKH,MAAME,MAG5BA,EAAKuB,KAAKxB,GAGVE,KAAKc,SAAS,CACZf,OACAD,QAAS,O,wBAIb,SAAWoB,GAET,IAEMK,EAFI,YAAOvB,KAAKH,MAAME,MAEHyB,QAAO,SAAAC,GAAI,OAAIA,EAAKP,KAAOA,KAEpDlB,KAAKc,SAAS,CAAEf,KAAMwB,M,oBAGxB,WAAU,IAAD,OACP,OACE,gCAEA,oBAAIG,UAAU,YAAd,wBAEE,qBAAKA,UAAU,YAAf,SACA,sBAAKA,UAAU,gBAAf,UAEE,sBAAKA,UAAU,UAAf,UACA,6CACA,gCACA,uBAAOA,UAAU,QACfC,KAAK,OACLC,YAAY,iBACZlB,MAAOV,KAAKH,MAAMC,QAClB+B,SAAU,SAAAd,GAAC,OAAI,EAAKe,YAAY,UAAWf,EAAEgB,OAAOrB,UAGtD,wBACEgB,UAAU,uBACVM,QAAS,kBAAM,EAAKC,WACpBC,UAAWlC,KAAKH,MAAMC,QAAQqC,OAHhC,SAKE,mBAAGC,MAAM,iBAAT,yBAIF,uBACA,6BACGpC,KAAKH,MAAME,KAAKsC,KAAI,SAAAZ,GACnB,OACE,+BACGA,EAAKf,MACN,wBAAQgB,UAAU,mBAAmBM,QAAS,kBAAM,EAAKM,WAAWb,EAAKP,KAAzE,SACE,mBAAGkB,MAAM,iBAAT,0BAHKX,EAAKP,qB,GA9HZqB,IAAMC,WCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ac4a3eb6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: \"\",\n      list: []\n    };\n  }\n\n  //incorporating local storage \n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n\n    // add event listener to save state to localStorage\n    // when user leaves/refreshes the page\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    // saves if component has a chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  hydrateStateWithLocalStorage() {\n    // for all items in state\n    for (let key in this.state) {\n      // if the key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get the key's value from localStorage\n        let value = localStorage.getItem(key);\n\n        // parse the localStorage string and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          // handle empty string\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  updateInput(key, value) {\n    // update react state\n    this.setState({ [key]: value });\n  }\n\n  addItem() {\n    // create a new item with unique id\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n \n    };\n\n    // copy current list of items\n    const list = [...this.state.list];\n\n    // add the new item to the list\n    list.push(newItem);\n\n    // update state with new list, reset the new item input\n    this.setState({\n      list,\n      newItem: \"\"\n    });\n  }\n\n  deleteItem(id) {\n    // copy current list of items\n    const list = [...this.state.list];\n    // filter out the item being deleted\n    const updatedList = list.filter(item => item.id !== id);\n\n    this.setState({ list: updatedList });\n  }\n  \n  render() {\n    return (\n      <div>\n\n      <h1 className=\"app-title\">Todo React</h1>\n        \n        <div className=\"container\">\n        <div className=\"flexContainer\">\n          \n          <div className=\"addItem\">\n          <h3>Add an Item</h3>\n          <div>\n          <input className=\"input\"\n            type=\"text\"\n            placeholder=\"Type item here\"\n            value={this.state.newItem}\n            onChange={e => this.updateInput(\"newItem\", e.target.value)}\n          />\n          \n          <button\n            className=\"add-btn btn-floating\"\n            onClick={() => this.addItem()}\n            disabled={!this.state.newItem.length}\n          >\n            <i class=\"material-icons\"> + </i>\n          </button>\n          </div>\n          </div>\n          <hr></hr>\n          <ul>\n            {this.state.list.map(item => {\n              return (\n                <li key={item.id}>\n                  {item.value}\n                  <button className=\"btn btn-floating\" onClick={() => this.deleteItem(item.id)}>\n                    <i class=\"material-icons\">[Delete]</i>\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}